package com.gregtechceu.gtceu.common.data;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.GTValues;
import com.gregtechceu.gtceu.api.capability.recipe.FluidRecipeCapability;
import com.gregtechceu.gtceu.api.data.RotationState;
import com.gregtechceu.gtceu.api.data.chemical.ChemicalHelper;
import com.gregtechceu.gtceu.api.data.tag.TagPrefix;
import com.gregtechceu.gtceu.api.machine.IMachineBlockEntity;
import com.gregtechceu.gtceu.api.machine.MultiblockMachineDefinition;
import com.gregtechceu.gtceu.api.machine.multiblock.MultiblockControllerMachine;
import com.gregtechceu.gtceu.api.machine.multiblock.PartAbility;
import com.gregtechceu.gtceu.api.machine.multiblock.WorkableElectricMultiblockMachine;
import com.gregtechceu.gtceu.api.pattern.FactoryBlockPattern;
import com.gregtechceu.gtceu.api.pattern.Predicates;
import com.gregtechceu.gtceu.api.recipe.GTRecipeType;
import com.gregtechceu.gtceu.api.recipe.OverclockingLogic;
import com.gregtechceu.gtceu.api.registry.registrate.MultiblockMachineBuilder;
import net.minecraft.network.chat.Component;
import net.minecraft.world.level.block.Blocks;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import java.util.function.BiFunction;

import static com.gregtechceu.gtceu.api.GTValues.*;
import static com.gregtechceu.gtceu.api.machine.multiblock.PartAbility.*;
import static com.gregtechceu.gtceu.api.pattern.Predicates.*;
import static com.gregtechceu.gtceu.api.pattern.util.RelativeDirection.*;
import static com.gregtechceu.gtceu.api.registry.GTRegistries.REGISTRATE;
import static com.gregtechceu.gtceu.common.data.GCyMBlocks.*;
import static com.gregtechceu.gtceu.common.data.GTBlocks.*;
import static com.gregtechceu.gtceu.common.data.GTMaterials.NaquadahAlloy;
import static com.gregtechceu.gtceu.common.data.GTRecipeTypes.*;

/**
 * @author Rundas
 * @implNote Gregicality Multiblocks
 */
public class GCyMMachines {
    public static void init() {}

    public final static MultiblockMachineDefinition LARGE_MACERATOR = REGISTRATE.multiblock("large_maceration_tower", WorkableElectricMultiblockMachine::new)
            .langValue("Large Maceration Tower")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeType(MACERATOR_RECIPES)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
            .appearanceBlock(CASING_SECURE_MACERATION)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("XXXXX", "XXXXX","XXXXX", "XXXXX")
                    .aisle("XXXXX", "XGGGX","XGGGX", "X###X")
                    .aisle("XXXXX", "XGGGX","XGGGX", "X###X")
                    .aisle("XXXXX", "XGGGX","XGGGX", "X###X")
                    .aisle("XXXXX", "XXXXX","XXSXX", "XXXXX")
                    .where('S', controller(blocks(definition.get())))
                    .where('X', blocks(CASING_SECURE_MACERATION.get()).setMinGlobalLimited(14)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.autoAbilities(true, true)))
                    .where('G', Predicates.blocks(CRUSHING_WHEELS.get()))
                    .where('#', Predicates.air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/machine_casing_secure_maceration"),
                    GTCEu.id("block/multiblock/gcym/large_maceration_tower"), false)
            .compassSections(GTCompassSections.TIER[IV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition LARGE_ORE_WASHER = REGISTRATE.multiblock("large_ore_wahing_plant", WorkableElectricMultiblockMachine::new)
            .langValue("Large Ore Washing Plant")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes(ORE_WASHER_RECIPES, CHEMICAL_BATH_RECIPES)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
            .appearanceBlock(CASING_WATERTIGHT)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("XXXXX","XXXXX","XXXXX")
                    .aisle("XXXXX","XPPPX","XWWWX")
                    .aisle("XXXXX","XWWWX","XWWWX")
                    .aisle("XXXXX","XWWWX","XWWWX")
                    .aisle("XXXXX","XWWWX","XWWWX")
                    .aisle("XXXXX","XPPPX","XWWWX")
                    .aisle("XXXXX","XXSXX","XXXXX")
                    .where('S', controller(blocks(definition.get())))
                    .where('X', blocks(CASING_WATERTIGHT.get()).setMinGlobalLimited(14)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.autoAbilities(true, true)))
                    .where('W', Predicates.blocks(Blocks.WATER))
                    .where('P', Predicates.blocks(CASING_TITANIUM_PIPE.get()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/machine_casing_watertight"),
                    GTCEu.id("block/multiblock/gcym/large_ore_washing_plant"), false)
            .compassSections(GTCompassSections.TIER[IV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition LARGE_CENTRIFUGE = REGISTRATE.multiblock("large_centrifuge", WorkableElectricMultiblockMachine::new)
            .langValue("Large Centrifugal Unit")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes(LARGE_CENTRIFUGE_RECIPES, THERMAL_CENTRIFUGE_RECIPES)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
            .appearanceBlock(CASING_VIBRATION_SAFE)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("#XXX#","XXXXX","#XXX#")
                    .aisle("XXXXX","X#P#X","XXXXX")
                    .aisle("XXXXX","XP#PX","XXXXX")
                    .aisle("XXXXX","X#P#X","XXXXX")
                    .aisle("#XXX#","XXSXX","#XXX#")
                    .where('S', controller(blocks(definition.get())))
                    .where('X', blocks(CASING_VIBRATION_SAFE.get()).setMinGlobalLimited(14)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.autoAbilities(true, true)))
                    .where('P', Predicates.blocks(CASING_STEEL_PIPE.get()))
                    .where('#', Predicates.air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/machine_casing_vibration_safe"),
                    GTCEu.id("block/multiblock/gcym/large_centrifuge"), false)
            .compassSections(GTCompassSections.TIER[IV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition LARGE_MIXER = REGISTRATE.multiblock("large_mixer", WorkableElectricMultiblockMachine::new)
            .langValue("Large Mixing Vessel")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeType(LARGE_MIXER_RECIPES)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
            .appearanceBlock(CASING_VIBRATION_SAFE)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("#XXX#","#XXX#","#XXX#","#XXX#","#XXX#","##F##")
                    .aisle("XXXXX","X#P#X","X###X","X#P#X","X###X","##F##")
                    .aisle("XXXXX","XPPPX","X#P#X","XPPPX","X#G#X","FFGFF")
                    .aisle("XXXXX","X#P#X","X###X","X#P#X","X###X","##F##")
                    .aisle("#XXX#","#XSX#","#XXX#","#XXX#","#XXX#","##F##")
                    .where('S', controller(blocks(definition.get())))
                    .where('X', blocks(CASING_VIBRATION_SAFE.get()).setMinGlobalLimited(14)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(autoAbilities(true, true)))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HastelloyX)))
                    .where('G', blocks(CASING_STAINLESS_STEEL_GEARBOX.get()))
                    .where('P', blocks(CASING_TITANIUM_PIPE.get()))
                    .where('#', Predicates.air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/machine_casing_vibration_safe"),
                    GTCEu.id("block/multiblock/gcym/large_mixer"), false)
            .compassSections(GTCompassSections.TIER[IV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition LARGE_ELECTROLYZER = REGISTRATE.multiblock("large_electrolyzer", WorkableElectricMultiblockMachine::new)
            .langValue("Large Electrolysis Chamber")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes(ELECTROLYZER_RECIPES, ELECTROMAGNETIC_SEPARATOR_RECIPES, POLARIZER_RECIPES)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
            .appearanceBlock(CASING_NONCONDUCTING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("XXXXX","XXXXX","XXXXX")
                    .aisle("XXXXX","XCCCX","XCCCX")
                    .aisle("XXXXX","XCCCX","XCCCX")
                    .aisle("XXXXX","XXSXX","XXXXX")
                    .where('S', controller(blocks(definition.get())))
                    .where('X', blocks(CASING_NONCONDUCTING.get()).setMinGlobalLimited(14)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.autoAbilities(true, true)))
                    .where('C', blocks(ELECTROLYTIC_CELL.get()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/machine_casing_nonconducting"),
                    GTCEu.id("block/multiblock/gcym/large_electrolyzer"), false)
            .compassSections(GTCompassSections.TIER[IV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition LARGE_PACKER = REGISTRATE.multiblock("large_packer", WorkableElectricMultiblockMachine::new)
            .langValue("Large Packaging Machine")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeType(PACKER_RECIPES)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
            .appearanceBlock(CASING_TUNGSTENSTEEL_ROBUST)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("XXX","XXX","XXX")
                    .aisle("XXX","X#X","XXX")
                    .aisle("XXX","X#X","XXX")
                    .aisle("XXX","X#X","XXX")
                    .aisle("XXX","X#X","XXX")
                    .aisle("XXX","XSX","XXX")
                    .where('S', controller(blocks(definition.get())))
                    .where('X', blocks(CASING_TUNGSTENSTEEL_ROBUST.get()).setMinGlobalLimited(14)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.autoAbilities(true, true)))
                    .where('#', Predicates.air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"),
                    GTCEu.id("block/multiblock/gcym/large_packer"), false)
            .compassSections(GTCompassSections.TIER[HV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition LARGE_ASSEMBLER = REGISTRATE.multiblock("large_assembler", WorkableElectricMultiblockMachine::new)
            .langValue("Large Assembling Factory")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes(ASSEMBLER_RECIPES, CIRCUIT_ASSEMBLER_RECIPES)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
            .appearanceBlock(CASING_LARGE_SCALE_ASSEMBLING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("XXXXXXXXX","XXXXXXXXX","XXXXXXXXX")
                    .aisle("XXXXXXXXX","XGGGCCCCX","XXXXXXXXX")
                    .aisle("XXXXXXXXX","XGGGXXSXX","XXXXX###X")
                    .where('S', controller(blocks(definition.get())))
                    .where('X', blocks(CASING_LARGE_SCALE_ASSEMBLING.get()).setMinGlobalLimited(14)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.autoAbilities(true, true)))
                    .where('G', Predicates.blocks(CASING_TEMPERED_GLASS.get()))
                    .where('C', Predicates.blocks(CASING_ASSEMBLY_LINE.get()))
                    .where('#', Predicates.air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/machine_casing_large_scale_assembling"),
                    GTCEu.id("block/multiblock/gcym/large_assembler"), false)
            .compassSections(GTCompassSections.TIER[IV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition LARGE_ARC_FURNACE = REGISTRATE.multiblock("large_arc_smelter", WorkableElectricMultiblockMachine::new)
            .langValue("Large Arc Smelter")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeType(ARC_FURNACE_RECIPES)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
            .appearanceBlock(CASING_HIGH_TEMPERATURE_SMELTING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("#XXX#","#XXX#","#XXX#","#XXX#")
                    .aisle("XXXXX","XC#CX","XC#CX","XXXXX")
                    .aisle("XXXXX","X###X","X###X","XXXXX")
                    .aisle("XXXXX","X#C#X","X#C#X","XXXXX")
                    .aisle("#XXX#","#XSX#","#XXX#","#XXX#")
                    .where('S', controller(blocks(definition.get())))
                    .where('X', blocks(CASING_HIGH_TEMPERATURE_SMELTING.get()).setMinGlobalLimited(14)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.autoAbilities(true, true)))
                    .where('C', Predicates.blocks(MOLYBDENUM_DISILICIDE_COIL_BLOCK.get()))
                    .where('#', Predicates.air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/machine_casing_high_temperature_smelting"),
                    GTCEu.id("block/multiblock/gcym/large_arc_smelter"), false)
            .compassSections(GTCompassSections.TIER[IV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition LARGE_ENGRAVING_LASER = REGISTRATE.multiblock("large_engraving_laser", WorkableElectricMultiblockMachine::new)
            .langValue("Large Engraving Laser")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeType(GTRecipeTypes.LARGE_ENGRAVER_RECIPES)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
            .appearanceBlock(CASING_LASER_SAFE_ENGRAVING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("XXXXX","XXGXX","XXGXX","XXXXX")
                    .aisle("XXXXX","X###X","X###X","XKKKX")
                    .aisle("XXXXX","G###G","G#C#G","XKXKX")
                    .aisle("XXXXX","X###X","X###X","XKKKX")
                    .aisle("XXSXX","XXGXX","XXGXX","XXXXX")
                    .where('S', controller(blocks(definition.get())))
                    .where('C', blocks(CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('X', blocks(CASING_LASER_SAFE_ENGRAVING.get()).setMinGlobalLimited(14)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.autoAbilities(true, true)))
                    .where('G', blocks(CASING_TEMPERED_GLASS.get()))
                    .where('K', blocks(CASING_GRATE.get()))
                    .where('#', Predicates.air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/machine_casing_laser_safe_engraving"),
                    GTCEu.id("block/multiblock/gcym/large_engraving_laser"), false)
            .compassSections(GTCompassSections.TIER[IV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition LARGE_SIFTER = REGISTRATE.multiblock("large_sifting_funnel", WorkableElectricMultiblockMachine::new)
            .langValue("Large Sifting Funnel")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeType(GTRecipeTypes.SIFTER_RECIPES)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
            .appearanceBlock(CASING_VIBRATION_SAFE)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("#X#X#","#X#X#","#XXX#","XXXXX","#XXX#")
                    .aisle("XXXXX","X#X#X","XKKKX","XKKKX","X###X")
                    .aisle("#XXX#","#X#X#","XKKKX","XKKKX","X###X")
                    .aisle("XXXXX","X#X#X","XKKKX","XKKKX","X###X")
                    .aisle("#X#X#","#X#X#","#XSX#","XXXXX","#XXX#")
                    .where('S', controller(blocks(definition.get())))
                    .where('X', blocks(CASING_VIBRATION_SAFE.get()).setMinGlobalLimited(14)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.autoAbilities(true, true)))
                    .where('K', blocks(CASING_GRATE.get()))
                    .where('#', Predicates.air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/machine_casing_vibration_safe"),
                    GTCEu.id("block/multiblock/gcym/large_sifting_funnel"), false)
            .compassSections(GTCompassSections.TIER[IV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition BLAST_ALLOY_SMELTER = REGISTRATE.multiblock("blast_alloy_smelter", WorkableElectricMultiblockMachine::new)
            .langValue("Blast Alloy Smelter")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeType(GTRecipeTypes.BLAST_ALLOY_RECIPES)
            .recipeModifier(GTRecipeModifiers::multiSmelterOverclock)
            .appearanceBlock(CASING_HIGH_TEMPERATURE_SMELTING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("#XXX#", "#CCC#", "#GGG#", "#CCC#", "#XXX#")
                    .aisle("XXXXX", "C###C", "G###G", "C###C", "XXXXX")
                    .aisle("XXXXX", "C###C", "G###G", "C###C", "XXMXX")
                    .aisle("XXXXX", "C###C", "G###G", "C###C", "XXXXX")
                    .aisle("#XSX#", "#CCC#", "#GGG#", "#CCC#", "#XXX#")
                    .where('S', controller(blocks(definition.get())))
                    .where('X', blocks(CASING_HIGH_TEMPERATURE_SMELTING.get()).setMinGlobalLimited(14)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(autoAbilities(true, true)))
                    .where('C', heatingCoils())
                    .where('M', abilities(PartAbility.MUFFLER))
                    .where('G', blocks(HEAT_VENT.get()))
                    .where('#', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/machine_casing_high_temperature_smelting"),
                    GTCEu.id("block/multiblock/gcym/blast_alloy_smelter"), false)
            .compassSections(GTCompassSections.TIER[IV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition MEGA_BLAST_FURNACE = REGISTRATE.multiblock("mega_blast_furnace", WorkableElectricMultiblockMachine::new)
            .langValue("Rotary Hearth Furnace")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeType(GTRecipeTypes.BLAST_RECIPES)
            .recipeModifier(GTRecipeModifiers::multiSmelterOverclock)
            .appearanceBlock(CASING_HIGH_TEMPERATURE_SMELTING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("##XXXXXXXXX##", "##XXXXXXXXX##", "#############", "#############", "#############", "#############", "#############", "#############", "#############", "#############", "#############", "#############", "#############", "#############", "#############", "#############", "#############")
                    .aisle("#XXXXXXXXXXX#", "#XXXXXXXXXXX#", "###F#####F###", "###F#####F###", "###FFFFFFF###", "#############", "#############", "#############", "#############", "#############", "####FFFFF####", "#############", "#############", "#############", "#############", "#############", "#############")
                    .aisle("XXXXXXXXXXXXX", "XXXXVVVVVXXXX", "##F#######F##", "##F#######F##", "##FFFHHHFFF##", "##F#######F##", "##F#######F##", "##F#######F##", "##F#######F##", "##F#######F##", "##FFFHHHFFF##", "#############", "#############", "#############", "#############", "#############", "###TTTTTTT###")
                    .aisle("XXXXXXXXXXXXX", "XXXXXXXXXXXXX", "#F####P####F#", "#F####P####F#", "#FFHHHPHHHFF#", "######P######", "######P######", "######P######", "######P######", "######P######", "##FHHHPHHHF##", "######P######", "######P######", "######P######", "######P######", "######P######", "##TTTTPTTTT##")
                    .aisle("XXXXXXXXXXXXX", "XXVXXXXXXXVXX", "####BBPBB####", "####TITIT####", "#FFHHHHHHHFF#", "####BITIB####", "####CCCCC####", "####CCCCC####", "####CCCCC####", "####BITIB####", "#FFHHHHHHHFF#", "####BITIB####", "####CCCCC####", "####CCCCC####", "####CCCCC####", "####BITIB####", "##TTTTPTTTT##")
                    .aisle("XXXXXXXXXXXXX", "XXVXXXXXXXVXX", "####B###B####", "####I###I####", "#FHHH###HHHF#", "####I###I####", "####C###C####", "####C###C####", "####C###C####", "####I###I####", "#FHHH###HHHF#", "####I###I####", "####C###C####", "####C###C####", "####C###C####", "####I###I####", "##TTTTPTTTT##")
                    .aisle("XXXXXXXXXXXXX", "XXVXXXXXXXVXX", "###PP###PP###", "###PT###TP###", "#FHPH###HPHF#", "###PT###TP###", "###PC###CP###", "###PC###CP###", "###PC###CP###", "###PT###TP###", "#FHPH###HPHF#", "###PT###TP###", "###PC###CP###", "###PC###CP###", "###PC###CP###", "###PT###TP###", "##TPPPMPPPT##")
                    .aisle("XXXXXXXXXXXXX", "XXVXXXXXXXVXX", "####B###B####", "####I###I####", "#FHHH###HHHF#", "####I###I####", "####C###C####", "####C###C####", "####C###C####", "####I###I####", "#FHHH###HHHF#", "####I###I####", "####C###C####", "####C###C####", "####C###C####", "####I###I####", "##TTTTPTTTT##")
                    .aisle("XXXXXXXXXXXXX", "XXVXXXXXXXVXX", "####BBPBB####", "####TITIT####", "#FFHHHHHHHFF#", "####BITIB####", "####CCCCC####", "####CCCCC####", "####CCCCC####", "####BITIB####", "#FFHHHHHHHFF#", "####BITIB####", "####CCCCC####", "####CCCCC####", "####CCCCC####", "####BITIB####", "##TTTTPTTTT##")
                    .aisle("XXXXXXXXXXXXX", "XXXXXXXXXXXXX", "#F####P####F#", "#F####P####F#", "#FFHHHPHHHFF#", "######P######", "######P######", "######P######", "######P######", "######P######", "##FHHHPHHHF##", "######P######", "######P######", "######P######", "######P######", "######P######", "##TTTTPTTTT##")
                    .aisle("XXXXXXXXXXXXX", "XXXXVVVVVXXXX", "##F#######F##", "##F#######F##", "##FFFHHHFFF##", "##F#######F##", "##F#######F##", "##F#######F##", "##F#######F##", "##F#######F##", "##FFFHHHFFF##", "#############", "#############", "#############", "#############", "#############", "###TTTTTTT###")
                    .aisle("#XXXXXXXXXXX#", "#XXXXXXXXXXX#", "###F#####F###", "###F#####F###", "###FFFFFFF###", "#############", "#############", "#############", "#############", "#############", "####FFFFF####", "#############", "#############", "#############", "#############", "#############", "#############")
                    .aisle("##XXXXXXXXX##", "##XXXXSXXXX##", "#############", "#############", "#############", "#############", "#############", "#############", "#############", "#############", "#############", "#############", "#############", "#############", "#############", "#############", "#############")
                    .where('S', controller(blocks(definition.get())))
                    .where('X', blocks(CASING_HIGH_TEMPERATURE_SMELTING.get()).setMinGlobalLimited(14)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(autoAbilities(true, true)))
                    .where('C', heatingCoils())
                    .where('M', abilities(PartAbility.MUFFLER))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt,NaquadahAlloy)))
                    .where('H', blocks(CASING_HIGH_TEMPERATURE_SMELTING.get()))
                    .where('T', blocks(CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('B', blocks(FIREBOX_TUNGSTENSTEEL.get()))
                    .where('P', blocks(CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('I', blocks(CASING_EXTREME_ENGINE_INTAKE.get()))
                    .where('V', blocks(HEAT_VENT.get()))
                    .where('M', abilities(MUFFLER))
                    .where('#', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/machine_casing_high_temperature_smelting"),
                    GTCEu.id("block/multiblock/gcym/mega_blast_furnace"), false)
            .compassSections(GTCompassSections.TIER[LuV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition MEGA_VACUUM_FREEZER = REGISTRATE.multiblock("mega_vacuum_freezer", WorkableElectricMultiblockMachine::new)
            .langValue("Bulk Blast Chiller")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeType(GTRecipeTypes.VACUUM_RECIPES)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK))
            .appearanceBlock(CASING_ALUMINIUM_FROSTPROOF)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("XXXXXXX#KKK", "XXXXXXX#KVK", "XXXXXXX#KVK", "XXXXXXX#KVK", "XXXXXXX#KKK", "XXXXXXX####", "XXXXXXX####")
                    .aisle("XXXXXXX#KVK", "XPPPPPPPPPV", "XP#P#PX#VPV", "XPPPPPPPPPV", "XP#P#PX#KVK", "XPPPPPX####", "XXXXXXX####")
                    .aisle("XXXXXXX#KVK", "XP#P#PX#VPV", "X#####X#VPV", "XP###PX#VPV", "X#####X#KVK", "XP#P#PX####", "XXXXXXX####")
                    .aisle("XXXXXXX#KVK", "XP#P#PPPPPV", "X#####X#VPV", "XP###PPPPPV", "X#####X#KVK", "XP#P#PX####", "XXXXXXX####")
                    .aisle("XXXXXXX#KKK", "XPPPPPX#KVK", "XP###PX#KVK", "XP###PX#KVK", "XP###PX#KKK", "XPPPPPX####", "XXXXXXX####")
                    .aisle("#XXXXX#####", "#XXSXX#####", "#XGGGX#####", "#XGGGX#####", "#XGGGX#####", "#XXXXX#####", "###########")
                    .where('S', controller(blocks(definition.get())))
                    .where('X', blocks(CASING_ALUMINIUM_FROSTPROOF.get()).setMinGlobalLimited(140)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(autoAbilities(true, false)))
                    .where('G', blocks(CASING_TEMPERED_GLASS.get()))
                    .where('K', blocks(CASING_STAINLESS_CLEAN.get()))
                    .where('P', blocks(CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('V', blocks(HEAT_VENT.get()))
                    .where('#', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_frost_proof"),
                    GTCEu.id("block/multiblock/gcym/mega_vacuum_freezer"), false)
            .compassSections(GTCompassSections.TIER[LuV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition LARGE_DISTILLERY = REGISTRATE.multiblock("large_distillery", WorkableElectricMultiblockMachine::new)
            .langValue("Large Fractionating Distillery")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes(DISTILLERY_RECIPES, DISTILLATION_RECIPES)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
            .appearanceBlock(CASING_WATERTIGHT)
            .pattern(definition -> FactoryBlockPattern.start(RIGHT, BACK, UP)
                    .aisle("#XXX#", "#XXX#", "##X##","#####")
                    .aisle("XXXXX", "X###X", "#X#X#","#XXX#")
                    .aisle("XXXXX", "X#P#X", "X#P#X","#XMX#").setRepeatable(1, 11)
                    .aisle("XXXXX", "X###X", "#X#X#","#XXX#")
                    .aisle("#XXX#", "#XSX#", "##E##","#####")
                    .where('S', controller(blocks(definition.getBlock())))
                    .where('X', blocks(CASING_WATERTIGHT.get()).setMinGlobalLimited(40)
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(INPUT_ENERGY).setMinGlobalLimited(1))
                            .or(abilities(IMPORT_FLUIDS).setExactLimit(1)))
                    .where('E', abilities(EXPORT_FLUIDS))
                    .where('P', blocks(CASING_STEEL_PIPE.get()))
                    .where('M', abilities(MUFFLER))
                    .where('#', air())
                    .build())
            .partSorter(Comparator.comparingInt(a -> a.self().getPos().getY()))
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/machine_casing_watertight"),
                    GTCEu.id("block/multiblock/gcym/large_distillery"), false)
            .compassSections(GTCompassSections.TIER[IV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition LARGE_FLUIDWORKS = REGISTRATE.multiblock("large_fluidworks", WorkableElectricMultiblockMachine::new)
            .langValue("Large Fluidworks")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes(AUTOCLAVE_RECIPES, FLUID_SOLIDFICATION_RECIPES)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
            .appearanceBlock(CASING_WATERTIGHT)
            .pattern(definition -> FactoryBlockPattern.start(RIGHT, BACK, UP)
                    .aisle("XXX", "XXX", "CCC")
                    .aisle("XXX", "XPX", "XX")
                    .aisle("XXX", "XPX", "XXX")
                    .aisle("XXX", "XPX", "XXX")
                    .aisle("XXX", "XSX", "XXX")
                    .where('S', controller(blocks(definition.getBlock())))
                    .where('X', blocks(CASING_WATERTIGHT.get()).setMinGlobalLimited(30)
                            .or(autoAbilities(definition.getRecipeTypes())).or(autoAbilities(true,false)))
                    .where('P', blocks(CASING_STEEL_PIPE.get()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/machine_casing_watertight"),
                    GTCEu.id("block/multiblock/gcym/large_fluidworks"), false)
            .compassSections(GTCompassSections.TIER[IV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition LARGE_MATERIALWORKS = REGISTRATE.multiblock("large_materialworks", WorkableElectricMultiblockMachine::new)
            .langValue("Large Materialworks")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes(BENDER_RECIPES, COMPRESSOR_RECIPES, FORMING_PRESS_RECIPES, FORGE_HAMMER_RECIPES, WIREMILL_RECIPES, EXTRUDER_RECIPES)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
            .appearanceBlock(CASING_STRESS_PROOF)
            .pattern(definition -> FactoryBlockPattern.start(RIGHT, BACK, UP)
                    .aisle("XXXXXXX", "XXXXXXX", "XXXXXXX")
                    .aisle("XXXXXXX", "X#XGGGX", "XXXXXXX")
                    .aisle("XXXXXXX", "XSXTTTX", "XXXXXXX")
                    .where('S', controller(blocks(definition.getBlock())))
                    .where('X', blocks(CASING_STRESS_PROOF.get()).setMinGlobalLimited(40)
                            .or(autoAbilities(definition.getRecipeTypes())).or(autoAbilities(true,false)))
                    .where('G', blocks(CASING_STEEL_GEARBOX.get()))
                    .where('T', blocks(CASING_TEMPERED_GLASS.get()))
                    .where('#', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/machine_casing_stress_proof"),
                    GTCEu.id("block/multiblock/gcym/large_materialworks"), false)
            .compassSections(GTCompassSections.TIER[IV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition LARGE_CUTTER = REGISTRATE.multiblock("large_cutter", WorkableElectricMultiblockMachine::new)
            .langValue("Large Cutting Saw")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes(CUTTER_RECIPES, LATHE_RECIPES)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
            .appearanceBlock(CASING_SHOCK_PROOF)
            .pattern(definition -> FactoryBlockPattern.start(RIGHT, BACK, UP)
                    .aisle("XXXXXXX", "XXXXXXX", "XXXXXXX","##XXXXX")
                    .aisle("XXXXXXX", "X#XBBBX", "XXX###X","##XXXXX")
                    .aisle("XXXXXXX", "X#XBBBX", "XXX###X","##XXXXX")
                    .aisle("XXXXXXX", "XSXTTTX", "XXXTTTX","##XXXXX")
                    .where('S', controller(blocks(definition.getBlock())))
                    .where('X', blocks(CASING_SHOCK_PROOF.get()).setMinGlobalLimited(40)
                            .or(autoAbilities(definition.getRecipeTypes())).or(autoAbilities(true,false)))
                    .where('B', blocks(SLICING_BLADES.get()))
                    .where('T', blocks(CASING_TEMPERED_GLASS.get()))
                    .where('#', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/machine_casing_shock_proof"),
                    GTCEu.id("block/multiblock/gcym/large_cutter"), false)
            .compassSections(GTCompassSections.TIER[IV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition LARGE_EXTRACTOR = REGISTRATE.multiblock("large_extractor", WorkableElectricMultiblockMachine::new)
            .langValue("Large Extracting Machine")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes(EXTRACTOR_RECIPES, CANNER_RECIPES)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
            .appearanceBlock(CASING_WATERTIGHT)
            .pattern(definition -> FactoryBlockPattern.start(RIGHT, BACK, UP)
                    .aisle("XXXXX", "XXXXX","XXXXX")
                    .aisle("XXXXX", "XP#PX","XXXXX")
                    .aisle("XXXXX", "XXSXX","XXXXX")
                    .where('S', controller(blocks(definition.getBlock())))
                    .where('X', blocks(CASING_WATERTIGHT.get()).setMinGlobalLimited(25)
                            .or(autoAbilities(definition.getRecipeTypes())).or(autoAbilities(true,false)))
                    .where('P', blocks(CASING_STEEL_PIPE.get()))
                    .where('#', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/machine_casing_watertight"),
                    GTCEu.id("block/multiblock/gcym/large_extractor"), false)
            .compassSections(GTCompassSections.TIER[IV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition LARGE_EXTRUDER = REGISTRATE.multiblock("large_extruder", WorkableElectricMultiblockMachine::new)
            .langValue("Large Extrusion Press")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes(EXTRUDER_RECIPES, WIREMILL_RECIPES)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
            .appearanceBlock(CASING_STRESS_PROOF)
            .pattern(definition -> FactoryBlockPattern.start(RIGHT, BACK, UP)
                    .aisle("##XXX", "##XXX", "##XXX")
                    .aisle("##XXX", "##XPX", "##XTX")
                    .aisle("##XXX", "##XPX", "##XTX")
                    .aisle("XXXXX", "XXXPX", "XXXTX")
                    .aisle("XXXXX", "X#XPX", "XXXTX")
                    .aisle("XXXXX", "XSXXX", "XXXXX")
                    .where('S', controller(blocks(definition.getBlock())))
                    .where('X', blocks(CASING_STRESS_PROOF.get()).setMinGlobalLimited(40)
                            .or(autoAbilities(definition.getRecipeTypes())).or(autoAbilities(true,false)))
                    .where('P', blocks(CASING_TITANIUM_PIPE.get()))
                    .where('T', blocks(CASING_TEMPERED_GLASS.get()))
                    .where('#', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/machine_casing_stress_proof"),
                    GTCEu.id("block/multiblock/gcym/large_extruder"), false)
            .compassSections(GTCompassSections.TIER[IV])
            .compassNodeSelf()
            .register();

    public final static MultiblockMachineDefinition LARGE_BREWER = REGISTRATE.multiblock("large_brewer", WorkableElectricMultiblockMachine::new)
            .langValue("Large Brewing Vat")
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes(BREWING_RECIPES, FERMENTING_RECIPES, FLUID_HEATER_RECIPES)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
            .appearanceBlock(CASING_CORROSION_PROOF)
            .pattern(definition -> FactoryBlockPattern.start(RIGHT, BACK, UP)
                    .aisle("#XXX#", "#XXX#", "#XXX#", "#XXX#", "#####")
                    .aisle("XXXXX", "XCCCX", "X###X", "XX#XX", "##X##")
                    .aisle("XXXXX", "XCPCX", "X#P#X", "X#P#X", "#XMX#")
                    .aisle("XXXXX", "XCCCX", "X###X", "XX#XX", "##X##")
                    .aisle("#XXX#", "#XSX#", "#XXX#", "#XXX#", "#####")
                    .where('S', controller(blocks(definition.getBlock())))
                    .where('X', blocks(CASING_CORROSION_PROOF.get()).setMinGlobalLimited(40)
                            .or(autoAbilities(definition.getRecipeTypes())).or(autoAbilities(true,true)))
                    .where('P', blocks(CASING_STEEL_PIPE.get()))
                    .where('C', blocks(MOLYBDENUM_DISILICIDE_COIL_BLOCK.get()))
                    .where('M', abilities(MUFFLER))
                    .where('#', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/machine_casing_corrosion_proof"),
                    GTCEu.id("block/multiblock/gcym/large_brewer"), false)
            .compassSections(GTCompassSections.TIER[IV])
            .compassNodeSelf()
            .register();
}
